<?xml version="1.0" encoding="UTF-8" ?>
<class name="YNet" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A high-level networking solution for Godot that provides room-based multiplayer functionality with multiple transport protocols and automatic property synchronization.
	</brief_description>
	<description>
		YNet is a powerful networking solution that provides easy-to-use room-based multiplayer functionality for Godot games. It supports multiple transport protocols (ENet and Socket.IO) and handles network object spawning, property synchronization, and RPC calls automatically.

		Key features:
		- **Multi-Transport Support**: Choose between ENet (low-latency) and Socket.IO (firewall-friendly) transports
		- **Simplified Connection API**: Easy one-line connection and room management
		- **Room-based multiplayer** with automatic host migration
		- **Automatic property synchronization** between peers
		- **Network object spawning and despawning**
		- **Built-in RPC system** with support for buffered RPCs
		- **Support for password-protected rooms**
		- **Room listing and discovery**
		- **Server time synchronization**

		Quick Start Example:

		[codeblock]
		# Simple connection and room creation
		var result:bool =await YNet.connect_to_and_create_room("localhost:7777").connection_result
		if result:
			print("Connected to room: ", YNet.room_id)

		# Join an existing room
		var result:bool =await YNet.connect_to_and_join_room("localhost:7777", "ROOM123").connection_result
		if result:
			print("Joined room: ", YNet.room_id)

		# Spawn a networked object
		var scene = load("res://player.tscn")
		YNet.spawn(scene, "Player", NodePath("/root/Game"), Vector3(0, 0, 0), 1)

		# Register a property for synchronization
		var player = get_node("Player")
		YNet.register_sync_property(player, "position", 1)
		[/codeblock]

		Transport Protocols:

		**ENet Transport (Default)**
		- Low latency, UDP-based, good for real-time games
		- Doesn't work for web games
		- Best for low-latency requirements

		**Socket.IO Transport**
		- Works through firewalls, WebSocket-based, good for web games
		- Higher latency, requires a Socket.IO server
		- Best for web games, games that need to work through firewalls

		Connection Methods:

		[codeblock]
		# Simple connection methods (return awaitable results)
		var result:bool =await YNet.connect_to_and_create_room("localhost:7777").connection_result
		var result:bool =await YNet.connect_to_and_join_room("localhost:7777", "ROOM123").connection_result
		var result:bool =await YNet.connect_to_and_join_room_with_password("localhost:7777", "ROOM123", "password").connection_result
		var result:bool =await YNet.connect_to("localhost:7777").connection_result

		# Get the last connection error message
		YNet.get_last_error_message()

		# Specify transport type
		YNet.connect_to_and_create_room("localhost:7777", YNet.TRANSPORT_TYPE_ENET)
		YNet.connect_to_and_create_room("ws://localhost:7777", YNet.TRANSPORT_TYPE_SOCKETIO)
		[/codeblock]

		Property Synchronization:
		YNet automatically synchronizes properties between peers. Properties are synchronized based on their authority (the peer that controls them).

		[codeblock]
		# Register a property for synchronization
		# Parameters:
		# - node: The node containing the property
		# - property_path: Path to the property (e.g., "position" or "health")
		# - authority: The peer ID that controls this property (1 for server)
		# - always_sync: Whether to sync even when value hasn't changed
		YNet.register_sync_property(player, "position", 1, false)
		[/codeblock]

		Network Object Spawning:
		YNet handles the spawning and despawning of networked objects automatically. When a new peer joins, they will receive all existing objects.

		[codeblock]
		# Spawn a networked object
		# Parameters:
		# - scene: The scene to spawn
		# - name: Name for the spawned node
		# - parent_path: Path to the parent node
		# - position: Spawn position
		# - authority: The peer ID that controls this object
		var scene = load("res://player.tscn")
		YNet.spawn(scene, "Player", NodePath("/root/Game"), Vector3(0, 0, 0), 1)

		# Despawn a networked object
		YNet.despawn_node(player)
		[/codeblock]

		RPC System:
		YNet provides a custom RPC system that works with networked objects:

		[codeblock]
		# Send an RPC to all peers
		YNet.send_yrpc(receive_chat_message, "Hello world", 42)

		# RPC method (must be marked with @rpc)
		@rpc("any_peer", "call_remote")
		func receive_chat_message(message: String, number: int):
			print("Received: ", message, " ", number)
		[/codeblock]

		Buffered RPCs:
		Buffered RPCs are automatically sent to new players when they join the room:

		[codeblock]
		# Buffered RPCs are automatically detected by method names ending with "_buffered"
		@rpc("any_peer", "call_remote")
		func set_player_name_buffered(name: String):
			player_name = name

		# Remove a buffered RPC
		YNet.remove_buffered_yrpc(set_player_name_buffered)
		[/codeblock]

		Room Management:
		YNet provides a complete room system with features like room creation, joining, and management.

		[codeblock]
		# Create a room
		YNet.create_room()

		# Create a room with a specific code
		YNet.create_room_with_code("MYROOM")

		# Join a room
		YNet.join_room("ROOMCODE")

		# Join a room with password
		YNet.join_room_with_password("ROOMCODE", "password")

		# Leave current room
		YNet.leave_room()

		# Get list of available rooms
		YNet.get_room_list()
		[/codeblock]

		Signals:
		YNet provides various signals to handle networking events:

		[codeblock]
		# Connect to signals
		YNet.connect("room_created", _on_room_created)
		YNet.connect("room_joined", _on_room_joined)
		YNet.connect("player_joined", _on_player_joined)
		YNet.connect("player_left", _on_player_left)
		YNet.connect("connection_result", _on_connection_result)
		[/codeblock]

		Debugging:
		YNet includes a debugging system to help track network issues:

		[codeblock]
		# Set debugging level (0-4)
		# 0: None
		# 1: Minimal
		# 2: Most messages
		# 3: Messages and ping
		# 4: All
		YNet.debugging = YNet.DebuggingLevel.ALL
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_network_spawnable">
			<return type="void" />
			<param index="0" name="spawnable_path" type="String" />
			<description>
				Registers a scene as a network spawnable object. This scene can then be spawned across the network using the spawn methods. The scene path must be valid and the scene must be loadable.
			</description>
		</method>
		<method name="cleanup_network_state">
			<return type="void" />
			<description>
				Cleans up all network state, including spawned objects and property syncers. Called automatically when disconnecting.
			</description>
		</method>
		<method name="clear_all_spawned_network_nodes">
			<return type="void" />
			<description>
				Removes all spawned network nodes from the scene. This is useful for cleaning up when leaving a room or resetting the game state.
			</description>
		</method>
		<method name="connect_to">
			<return type="YNet" />
			<param index="0" name="url" type="String" />
			<param index="1" name="transport_type" type="int" enum="YNet.TransportType" default="2" />
			<description>
				Connects to a server without joining a room. Returns self for method chaining. Use the "connection_result" signal or await the connection_result property to check if the connection was successful.
			</description>
		</method>
		<method name="connect_to_and_create_room">
			<return type="YNet" />
			<param index="0" name="url" type="String" />
			<param index="1" name="transport_type" type="int" enum="YNet.TransportType" default="2" />
			<description>
				Connects to a server and creates a new room. Returns self for method chaining. Use the "connection_result" signal or await the connection_result property to check if the connection was successful.
			</description>
		</method>
		<method name="connect_to_and_join_room">
			<return type="YNet" />
			<param index="0" name="url" type="String" />
			<param index="1" name="room_id" type="String" default="&quot;&quot;" />
			<param index="2" name="transport_type" type="int" enum="YNet.TransportType" default="2" />
			<description>
				Connects to a server and joins an existing room. If room_id is empty, joins any available room. Returns self for method chaining. Use the "connection_result" signal or await the connection_result property to check if the connection was successful.
			</description>
		</method>
		<method name="connect_to_and_join_room_with_password">
			<return type="YNet" />
			<param index="0" name="url" type="String" />
			<param index="1" name="room_id" type="String" />
			<param index="2" name="password" type="String" />
			<param index="3" name="transport_type" type="int" enum="YNet.TransportType" default="2" />
			<description>
				Connects to a server and joins a password-protected room. Returns self for method chaining. Use the "connection_result" signal or await the connection_result property to check if the connection was successful.
			</description>
		</method>
		<method name="create_room">
			<return type="YNet" />
			<description>
				Creates a new room with a random room code. Returns self for method chaining. Emits the "room_created" signal when successful.
			</description>
		</method>
		<method name="create_room_with_code">
			<return type="YNet" />
			<param index="0" name="roomcode" type="String" />
			<param index="1" name="password" type="String" default="&quot;&quot;" />
			<description>
				Creates a new room with the specified room code. Returns self for method chaining. Emits the "room_created" signal when successful.
			</description>
		</method>
		<method name="despawn">
			<return type="void" />
			<param index="0" name="network_obj_id" type="int" />
			<description>
				Despawns a networked object by its network ID. This will remove the object from all connected peers.
			</description>
		</method>
		<method name="despawn_node">
			<return type="void" />
			<param index="0" name="node" type="Node" />
			<description>
				Despawns a networked object by its Node reference. This will remove the object from all connected peers.
			</description>
		</method>
		<method name="find_network_spawnable">
			<return type="PackedScene" />
			<param index="0" name="spawnable_id" type="int" />
			<description>
				Returns the PackedScene resource for a registered network spawnable by its ID. Returns null if the ID is not found.
			</description>
		</method>
		<method name="find_node_with_net_id">
			<return type="Node" />
			<param index="0" name="net_id" type="int" />
			<description>
				Finds a networked node by its network ID. Returns null if the node is not found.
			</description>
		</method>
		<method name="get_debug_run_multiple_instances" qualifiers="static">
			<return type="bool" />
			<description>
				Returns whether multiple instances of the game can be run simultaneously for debugging purposes.
			</description>
		</method>
		<method name="get_last_error_message">
			<return type="String" />
			<description>
				Returns the last error message from connection or room operations. Useful for debugging connection issues.
			</description>
		</method>
		<method name="get_network_spawnable_id">
			<return type="int" />
			<param index="0" name="spawnable_path" type="String" />
			<description>
				Returns the network ID for a registered spawnable scene by its path. Returns -1 if the scene is not registered.
			</description>
		</method>
		<method name="get_new_network_id">
			<return type="int" />
			<description>
				Generates and returns a new unique network ID for spawning networked objects.
			</description>
		</method>
		<method name="get_queued_spawn_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of objects waiting to be spawned. Objects are queued when their parent node is not yet available.
			</description>
		</method>
		<method name="get_room_info">
			<return type="YNet" />
			<param index="0" name="roomCode" type="String" default="&quot;&quot;" />
			<description>
				Requests information about a specific room. If no room code is provided, returns info about the current room. Emits the "room_info" signal when the information is received.
			</description>
		</method>
		<method name="get_room_list">
			<return type="YNet" />
			<description>
				Requests a list of all available rooms. Emits the "room_list" signal when the list is received.
			</description>
		</method>
		<method name="get_rtt" qualifiers="const">
			<return type="float" />
			<description>
				Returns the current round-trip time (RTT) to the server in seconds. This is automatically calculated during time synchronization.
			</description>
		</method>
		<method name="get_spawned_obj_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the total number of currently spawned networked objects.
			</description>
		</method>
		<method name="is_network_spawnable">
			<return type="bool" />
			<param index="0" name="spawnable_path" type="String" />
			<description>
				Returns true if the given scene path is registered as a network spawnable.
			</description>
		</method>
		<method name="is_time_synced" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if the client has successfully synchronized its time with the server.
			</description>
		</method>
		<method name="join_or_create_room">
			<return type="YNet" />
			<param index="0" name="roomcode" type="String" default="&quot;&quot;" />
			<param index="1" name="password" type="String" default="&quot;&quot;" />
			<description>
				Attempts to join a room with the given code. If the room doesn't exist, creates a new room with that code. If no code is provided, creates a random room. Returns self for method chaining.
			</description>
		</method>
		<method name="join_room">
			<return type="YNet" />
			<param index="0" name="roomcode" type="String" />
			<param index="1" name="password" type="String" default="&quot;&quot;" />
			<description>
				Attempts to join an existing room with the given code. Returns self for method chaining. Emits the "room_joined" signal when successful.
			</description>
		</method>
		<method name="leave_room">
			<return type="YNet" />
			<description>
				Leaves the current room. Clears all spawned objects and emits the "room_disconnected" signal.
			</description>
		</method>
		<method name="receive_yrpc" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
				Internal method that handles receiving RPC calls from the network. The yrpc_info array contains the network ID of the target node and the method to call. This method is automatically called by the networking system and should not be called directly.
			</description>
		</method>
		<method name="receive_yrpc_call_local" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
				Similar to receive_yrpc, but also executes the RPC locally on the sender's machine. This is used internally by send_and_receive_yrpc and should not be called directly.
			</description>
		</method>
		<method name="receive_yrpc_reliable" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
			</description>
		</method>
		<method name="receive_yrpc_reliable_call_local" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
			</description>
		</method>
		<method name="receive_yrpc_unreliable" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
			</description>
		</method>
		<method name="receive_yrpc_unreliable_call_local" qualifiers="vararg">
			<return type="Variant" />
			<param index="0" name="yrpc_info" type="Array" />
			<description>
			</description>
		</method>
		<method name="register_for_yrpc">
			<return type="void" />
			<param index="0" name="node" type="Node" />
			<param index="1" name="yrpc_id" type="int" />
			<description>
				Registers a node to receive RPCs with the specified network ID. This is called automatically when spawning networked nodes and should not be called directly.
			</description>
		</method>
		<method name="register_sync_property">
			<return type="YNetPropertySyncer" />
			<param index="0" name="networked_node" type="Node" />
			<param index="1" name="property_path" type="NodePath" />
			<param index="2" name="authority" type="int" default="1" />
			<param index="3" name="always_sync" type="bool" default="false" />
			<description>
				Registers a property of a networked node for automatic synchronization across the network. Returns a YNetPropertySyncer that can be used to control the synchronization.

				Parameters:
				- networked_node: The node containing the property to sync
				- property_path: The path to the property to sync
				- authority: The network ID of the node that has authority over this property (default: 1)
				- always_sync: If true, the property will be synced every frame (default: false)

				Example:
				[codeblock]
				# Register a health property for synchronization
				var syncer = YNet.register_sync_property(player_node, "health", 1)
				[/codeblock]
			</description>
		</method>
		<method name="remove_buffered_yrpc">
			<return type="void" />
			<param index="0" name="callable" type="Callable" />
			<description>
				Removes a buffered RPC from the system. Buffered RPCs are automatically sent to new players when they join the room. This method removes a specific buffered RPC callable.
			</description>
		</method>
		<method name="remove_buffered_yrpc_method">
			<return type="void" />
			<param index="0" name="network_id" type="int" />
			<param index="1" name="method" type="String" default="&quot;&quot;" />
			<description>
				Removes buffered RPCs for a specific network ID. If method is empty, removes all buffered RPCs for that network ID. Otherwise, removes only the specified method.
			</description>
		</method>
		<method name="remove_from_yrpc">
			<return type="void" />
			<param index="0" name="yrpc_id" type="int" />
			<description>
				Removes a node from the RPC receiving map. This is called automatically when networked nodes are freed and should not be called directly.
			</description>
		</method>
		<method name="rpc_despawn">
			<return type="void" />
			<param index="0" name="network_obj_id" type="int" />
			<description>
				Internal RPC method that handles despawning networked nodes across the network. This is called automatically by the despawning system and should not be called directly.
			</description>
		</method>
		<method name="rpc_recv_sync_vars">
			<return type="void" />
			<param index="0" name="synced_vars_data" type="Variant" />
			<description>
				Internal RPC method that handles receiving synchronized property updates from the network. This is called automatically by the property synchronization system and should not be called directly.
			</description>
		</method>
		<method name="rpc_request_spawned_nodes">
			<return type="void" />
			<param index="0" name="requester_id" type="int" />
			<description>
				Internal RPC method that requests the current list of spawned nodes from the server. This is called automatically when a client connects and should not be called directly.
			</description>
		</method>
		<method name="rpc_respond_with_spawned_nodes">
			<return type="void" />
			<param index="0" name="spawned_nodes_data" type="Array" />
			<param index="1" name="buffered_yrpcs_dct" type="Dictionary" default="{}" />
			<description>
				Internal RPC method that sends the current list of spawned nodes to a requesting client. This is called automatically by the server when a client requests spawned nodes and should not be called directly.
			</description>
		</method>
		<method name="rpc_spawn">
			<return type="void" />
			<param index="0" name="network_id" type="int" />
			<param index="1" name="packedscene_path_id" type="int" />
			<param index="2" name="spawn_name" type="String" />
			<param index="3" name="desired_parent_absolute_path" type="String" />
			<param index="4" name="spawn_pos" type="Variant" />
			<param index="5" name="authority" type="int" default="1" />
			<description>
				Internal RPC method that handles spawning networked nodes across the network. This is called automatically by the spawning system and should not be called directly.
			</description>
		</method>
		<method name="rpc_time_sync_request">
			<return type="void" />
			<param index="0" name="client_time" type="float" />
			<description>
				Internal RPC method that handles time synchronization requests from clients. This is called automatically by the time synchronization system and should not be called directly.
			</description>
		</method>
		<method name="rpc_time_sync_response">
			<return type="void" />
			<param index="0" name="server_time" type="float" />
			<param index="1" name="rtt" type="float" />
			<description>
				Internal RPC method that handles time synchronization responses from the server. This is called automatically by the time synchronization system and should not be called directly.
			</description>
		</method>
		<method name="send_yrpc" qualifiers="vararg">
			<return type="int" enum="Error" />
			<param index="0" name="method" type="Callable" />
			<description>
				Sends an RPC call to all peers in the network. The method parameter should be a Callable pointing to the method to call on the target node. Additional arguments can be passed after the method parameter.

				Example:
				[codeblock]
				# Send an RPC to update player health
				YNet.send_yrpc(update_health, 100)
				[/codeblock]
			</description>
		</method>
		<method name="send_yrpc_to" qualifiers="vararg">
			<return type="int" enum="Error" />
			<param index="0" name="target_peer" type="int" />
			<param index="1" name="method" type="Callable" />
			<description>
				Sends an RPC call to a specific peer in the network. The target_peer parameter specifies which peer to send to, and the method parameter should be a Callable pointing to the method to call. Additional arguments can be passed after the method parameter.
			</description>
		</method>
		<method name="server_or_client_str">
			<return type="String" />
			<description>
				Returns a string indicating whether this instance is acting as a server ("SERVER") or client ("CLIENT"). Useful for debugging and logging.
			</description>
		</method>
		<method name="set_can_host_migrate">
			<return type="int" enum="Error" />
			<param index="0" name="newCanHostMigrate" type="bool" />
			<description>
				Sets whether the room can migrate to a new host if the current host disconnects. This should be called before creating or joining a room.
			</description>
		</method>
		<method name="set_debug_run_multiple_instances" qualifiers="static">
			<return type="void" />
			<param index="0" name="status" type="bool" />
			<description>
				Sets whether multiple instances of the game can be run simultaneously for debugging purposes. This is useful for testing multiplayer functionality locally.
			</description>
		</method>
		<method name="set_extra_info">
			<return type="int" enum="Error" />
			<param index="0" name="new_extra_info" type="String" />
			<description>
				Sets additional information to be stored with the room. This can be used to store custom room metadata.
			</description>
		</method>
		<method name="set_max_players">
			<return type="int" enum="Error" />
			<param index="0" name="newMaxPlayers" type="int" />
			<description>
				Sets the maximum number of players allowed in the room. This should be called before creating a room.
			</description>
		</method>
		<method name="set_node_cleanup_with_owner">
			<return type="void" />
			<param index="0" name="node" type="Node" />
			<param index="1" name="status" type="bool" default="true" />
			<description>
				Sets whether a networked node should be automatically cleaned up when its owner disconnects. This is useful for player-specific objects that should be removed when the player leaves.
			</description>
		</method>
		<method name="set_password">
			<return type="int" enum="Error" />
			<param index="0" name="newPassword" type="String" />
			<description>
				Sets a password for the room. Players will need to provide this password to join the room. This should be called before creating a room.
			</description>
		</method>
		<method name="set_private">
			<return type="int" enum="Error" />
			<param index="0" name="newPrivate" type="bool" />
			<description>
				Sets whether the room should be private (not visible in room listings). This should be called before creating a room.
			</description>
		</method>
		<method name="set_room_name">
			<return type="int" enum="Error" />
			<param index="0" name="newRoomName" type="String" />
			<description>
				Sets the name of the room. This should be called before creating a room.
			</description>
		</method>
		<method name="setup_node">
			<return type="void" />
			<description>
				Internal method that sets up the YNet node for networking. This is called automatically when the node enters the scene tree and should not be called directly.
			</description>
		</method>
		<method name="spawn">
			<return type="Node" />
			<param index="0" name="spawnable_scene" type="PackedScene" />
			<param index="1" name="spawned_name" type="String" />
			<param index="2" name="parent_path" type="NodePath" />
			<param index="3" name="global_pos" type="Variant" />
			<param index="4" name="authority" type="int" default="1" />
			<description>
				Spawns a networked object from a registered spawnable scene. The object will be created on all connected peers. Returns the spawned Node instance.
			</description>
		</method>
		<method name="spawn_with_path">
			<return type="Node" />
			<param index="0" name="spawnable_scene_path" type="String" />
			<param index="1" name="spawned_name" type="String" />
			<param index="2" name="parent_path" type="NodePath" />
			<param index="3" name="global_pos" type="Variant" />
			<param index="4" name="authority" type="int" default="1" />
			<description>
				Similar to spawn, but takes a scene path instead of a PackedScene resource. The scene will be loaded and then spawned across the network.
			</description>
		</method>
		<method name="string_to_hash_id" qualifiers="static">
			<return type="int" />
			<param index="0" name="str" type="String" />
			<description>
				Converts a string to a unique hash ID. This is used internally for generating network IDs and should not be called directly.
			</description>
		</method>
		<method name="update_networked_property_syncers">
			<return type="void" />
			<description>
				Internal method that updates all registered property syncers. This is called automatically each frame and should not be called directly.
			</description>
		</method>
		<method name="was_last_rpc_sender_host" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if the last RPC call was sent by the host. This can be used to verify the authority of RPC calls.

				Example:
				[codeblock]
				func _on_rpc_received() -&gt; void:
				    if ynet.was_last_rpc_sender_host():
				        # Process host's RPC
				        process_host_rpc()
				    else:
				        # Process client's RPC
				        process_client_rpc()
				[/codeblock]
			</description>
		</method>
		<method name="ynet_disconnect">
			<return type="void" />
			<description>
				Disconnects from the YNet server and cleans up all network resources. This should be called when you're done with the networking session.
			</description>
		</method>
	</methods>
	<members>
		<member name="auto_cleanup_on_disconnect" type="bool" setter="set_auto_cleanup_on_disconnect" getter="get_auto_cleanup_on_disconnect" default="true">
		</member>
		<member name="debugging" type="int" setter="set_debugging" getter="get_debugging" enum="YNet.DebuggingLevel" default="0">
		</member>
		<member name="default_scene_instantiated_for_host" type="String" setter="set_default_scene_instantiated_for_host" getter="get_default_scene_instantiated_for_host" default="&quot;&quot;">
		</member>
		<member name="default_scene_instantiated_for_peers" type="String" setter="set_default_scene_instantiated_for_peers" getter="get_default_scene_instantiated_for_peers" default="&quot;&quot;">
		</member>
		<member name="hashed_socket_id" type="int" setter="set_hashed_socket_id" getter="get_hashed_socket_id" default="0">
		</member>
		<member name="host_id" type="String" setter="set_host_id" getter="get_host_id" default="&quot;&quot;">
		</member>
		<member name="is_host" type="bool" setter="set_is_host" getter="get_is_host" default="false">
		</member>
		<member name="offline_mode" type="bool" setter="set_offline_mode" getter="get_offline_mode" default="false">
		</member>
		<member name="pause_receive_spawns" type="bool" setter="set_pause_receive_spawns" getter="get_pause_receive_spawns" default="false">
		</member>
		<member name="protocol" type="String" setter="set_protocol" getter="get_protocol" default="&quot;change_me&quot;">
		</member>
		<member name="real_hashed_socket_id" type="int" setter="set_real_hashed_socket_id" getter="get_real_hashed_socket_id" default="0">
		</member>
		<member name="room_id" type="String" setter="set_room_id" getter="get_room_id" default="&quot;&quot;">
		</member>
		<member name="room_id_without_protocol" type="String" setter="set_room_id_without_protocol" getter="get_room_id_without_protocol" default="&quot;&quot;">
		</member>
		<member name="server_time" type="float" setter="set_server_time" getter="get_server_time" default="0.0">
		</member>
		<member name="server_time_tracking" type="bool" setter="set_server_time_tracking" getter="get_server_time_tracking" default="true">
		</member>
		<member name="socket_id" type="String" setter="set_socket_id" getter="get_socket_id" default="&quot;&quot;">
		</member>
		<member name="transport" type="YNetTransport" setter="set_transport" getter="get_transport">
		</member>
	</members>
	<signals>
		<signal name="connection_result">
			<param index="0" name="result" type="bool" />
			<description>
			</description>
		</signal>
		<signal name="disconnected">
			<param index="0" name="code" type="int" />
			<param index="1" name="reason" type="String" />
			<description>
				Emitted when the connection is closed. The code parameter indicates the close code, and reason provides additional information about why the connection was closed.

				Example:
				[codeblock]
				func _on_disconnected(code: int, reason: String) -&gt; void:
				    print("Disconnected with code ", code, ": ", reason)
				[/codeblock]
			</description>
		</signal>
		<signal name="engine_message">
			<param index="0" name="payload" type="String" />
			<description>
				Emitted when a raw Engine.IO message is received. The payload contains the message data.

				Example:
				[codeblock]
				func _on_engine_message(payload: String) -&gt; void:
				    print("Received engine message: ", payload)
				[/codeblock]
			</description>
		</signal>
		<signal name="peer_connected">
			<param index="0" name="peer_id" type="int" />
			<description>
			</description>
		</signal>
		<signal name="peer_disconnected">
			<param index="0" name="peer_id" type="int" />
			<description>
			</description>
		</signal>
		<signal name="player_joined">
			<param index="0" name="player_sid" type="String" />
			<description>
				Emitted when a new player joins the room. The player_sid parameter contains the socket ID of the joining player.

				Example:
				[codeblock]
				func _on_player_joined(player_sid: String) -&gt; void:
				    print("Player joined: ", player_sid)
				    # Update player list or UI
				[/codeblock]
			</description>
		</signal>
		<signal name="player_left">
			<param index="0" name="player_sid" type="String" />
			<description>
				Emitted when a player leaves the room. The player_sid parameter contains the socket ID of the leaving player.

				Example:
				[codeblock]
				func _on_player_left(player_sid: String) -&gt; void:
				    print("Player left: ", player_sid)
				    # Clean up player data or update UI
				[/codeblock]
			</description>
		</signal>
		<signal name="room_connected">
			<param index="0" name="id" type="int" />
			<description>
				Emitted when successfully connected to a room. The id parameter contains the room's connection ID.

				Example:
				[codeblock]
				func _on_room_connected(id: int) -&gt; void:
				    print("Connected to room with ID: ", id)
				    # Initialize room state
				[/codeblock]
			</description>
		</signal>
		<signal name="room_connection_result">
			<param index="0" name="room_id" type="String" />
			<param index="1" name="result" type="bool" />
			<description>
				Emitted when a room connection attempt completes. The room_id parameter identifies the room, and result indicates whether the connection was successful.

				Example:
				[codeblock]
				func _on_room_connection_result(room_id: String, result: bool) -&gt; void:
				    if result:
				        print("Successfully connected to room: ", room_id)
				    else:
				        print("Failed to connect to room: ", room_id)
				[/codeblock]
			</description>
		</signal>
		<signal name="room_created">
			<param index="0" name="new_room_id" type="String" />
			<description>
				Emitted when a new room is successfully created. The new_room_id parameter contains the ID of the created room.

				Example:
				[codeblock]
				func _on_room_created(new_room_id: String) -&gt; void:
				    print("Created new room: ", new_room_id)
				    # Initialize room state or show room code to players
				[/codeblock]
			</description>
		</signal>
		<signal name="room_disconnected">
			<param index="0" name="id" type="int" />
			<description>
				Emitted when disconnected from a room. The id parameter contains the room's connection ID.

				Example:
				[codeblock]
				func _on_room_disconnected(id: int) -&gt; void:
				    print("Disconnected from room: ", id)
				    # Clean up room state or show disconnect message
				[/codeblock]
			</description>
		</signal>
		<signal name="room_error">
			<param index="0" name="returned_error" type="String" />
			<description>
				Emitted when an error occurs in room operations. The returned_error parameter contains details about the error.

				Example:
				[codeblock]
				func _on_room_error(returned_error: String) -&gt; void:
				    print("Room error: ", returned_error)
				    # Show error message to user
				[/codeblock]
			</description>
		</signal>
		<signal name="room_info">
			<param index="0" name="info" type="Dictionary" />
			<description>
				Emitted when room information is received. The info parameter contains a dictionary with details about the room.

				Example:
				[codeblock]
				func _on_room_info(info: Dictionary) -&gt; void:
				    print("Room info: ", info)
				    # Update room UI with info
				[/codeblock]
			</description>
		</signal>
		<signal name="room_joined">
			<param index="0" name="new_room_id" type="String" />
			<param index="1" name="new_room_host_id" type="String" />
			<description>
				Emitted when successfully joined a room. The new_room_id parameter contains the room ID, and new_room_host_id contains the socket ID of the room host.

				Example:
				[codeblock]
				func _on_room_joined(new_room_id: String, new_room_host_id: String) -&gt; void:
				    print("Joined room: ", new_room_id)
				    print("Host ID: ", new_room_host_id)
				    # Initialize room state
				[/codeblock]
			</description>
		</signal>
		<signal name="room_list">
			<param index="0" name="list" type="Array" />
			<description>
				Emitted when a list of available rooms is received. The list parameter contains an array of room information dictionaries.

				Example:
				[codeblock]
				func _on_room_list(list: Array) -&gt; void:
				    print("Available rooms: ", list)
				    # Update room browser UI
				[/codeblock]
			</description>
		</signal>
		<signal name="room_players">
			<param index="0" name="players" type="Array" />
			<description>
				Emitted when the list of players in the room is updated. The players parameter contains an array of player information.

				Example:
				[codeblock]
				func _on_room_players(players: Array) -&gt; void:
				    print("Players in room: ", players)
				    # Update player list UI
				[/codeblock]
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
			</description>
		</signal>
		<signal name="status_changed">
			<param index="0" name="status" type="int" />
			<description>
				Emitted when the connection status changes. The status parameter indicates the new connection state (connecting, open, closing, or closed).

				Example:
				[codeblock]
				func _on_status_changed(status: int) -&gt; void:
				    match status:
				        0: print("Connecting...")
				        1: print("Connected")
				        2: print("Closing...")
				        3: print("Closed")
				[/codeblock]
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NONE" value="0" enum="DebuggingLevel">
		</constant>
		<constant name="MINIMAL" value="1" enum="DebuggingLevel">
		</constant>
		<constant name="MOSTMESSAGES" value="2" enum="DebuggingLevel">
		</constant>
		<constant name="MESSAGESANDPING" value="3" enum="DebuggingLevel">
		</constant>
		<constant name="ALL" value="4" enum="DebuggingLevel">
		</constant>
		<constant name="TRANSPORT_TYPE_NONE" value="0" enum="TransportType">
		</constant>
		<constant name="TRANSPORT_TYPE_SOCKETIO" value="1" enum="TransportType">
		</constant>
		<constant name="TRANSPORT_TYPE_ENET" value="2" enum="TransportType">
		</constant>
	</constants>
</class>
